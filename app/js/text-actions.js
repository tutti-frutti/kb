// ПЛАН ДЕЙСТВИЙ НА УРОК "СОБЫТИЯ"
// постраничное отображения списка элементов с автоподгрузкой по скроллу
// улучшенные клики по кнопкам фильтров

// постраничное отображения списка элементов с автоподгрузкой по скроллу - с помощью выборки из массива

// АЛГОРИТМ:
// выборку делаем из массива отрендеренных отелей
// 1. заводим переменные: 
// - для текущей страницы
// - константа для указания количества элементов на странице

// 2. в ф. renderHotels добавляем еще один параметр, с помощью которого делаем выборку из массива с отелями - function renderHotels(hotels, pageNumber)
// ПРОБЛЕМА: на первоначальном шаге после загрузки страницы отели не загружаются. только после клика на кнопке фильтра, а переменная pageNumber - не отпределена

// 3. осуществляем выборку из массива отрендеренных отелей
// var from = pageNumber * PAGE_SIZE; --- умножаем номер страницы на размер страницы. т.е. если нулевая страница, то возмется нулевой эл, если первая, то 9-й, если вторая то 18-й и т.д.
// var to = from + PAGE_SIZE; --- элемент от + размер страницы
// var pageHotels = hotels.slice(from, to); --- вырезаем из массива

// 4. осуществляем отрисовку тех отелей, которые вырезали из массива (для 1й, 2й страницы и т.д.)

// 5. передаем номер страницы, которую хотим отрисовать в параметр ф. которая вызывает отрисовку отелей
// renderHotels(filteredHotels, 0); --- таким образом отрисовываем отели с первой страницы 

// СОБЫТИЯ
// добавить событие
// Множественные обработчики событий добавляются с помощью метода addEventListener
//addEventListener('click', function(evt){}, false);
// принимает на вход 3 параметра:
// 'click' - тип события - это строка в которой записан тип события
// function(evt){} - функция-обработчик события
// false - какую фазу события использовать для обработчика. по умолчанию используется false т.е. фаза захвата.

// удалить событие
//Обработчики события можно удалять с помощью метода removeEventListener
//Важный момент, который нужно учитывать: вторым обязательным параметром является функция обработчик, который мы хотим убрать.
//Поэтому в случае, если нужно удалять обработчики должны использоваться именованные ф.
//Другими словами в ф.-обработчику при добавлении события нужно задать имя, чтобы потом используя это имя удалить именно этот обработчик. т.е. этот обработчик НЕ должен быть анонимным, иначе удалить анонимную ф.-обработчик не возможно.
//button.addEventListener('click', secondClick);
//function secondClick(evt) {...};
//button.removeEventListener('click', secondClick); 

// ОТСЛЕЖИВАНИЕ СКРОЛЛ И ЗАГРУЗКА ОТЕЛЕЙ
// отслеживание по событию скролл у объекта window - window.addEventListener('scroll', function(evt){});
// объект window отвечает за открытую вкладку или за текущее открытое окно
// у открытой вкладки есть событие скролл
// следующую страницу мы должны показывать когда достигли низа страницы
// как определить, что мы доскроллили до самого низа?
// это делается с помощью футера - т.е. видим ли мы футер или нет
// как проверить виден ли футер или нет?

// АЛГОРИТМ показа отдельных страниц, внутри renderHotels
// 1. нужны переменные, которые будут отвечать за:
// a - текущая страница
// b - кол-во эл на странице
// 2. для показа мы используем ту же самую ф., которая отвечает за показ отелей. эту ф. немного модифицируем
// 3. добавляем в неё еще один параметр, который будет говорить какую страницу нам сейчас нужно отрисовать
// 4. далее делаем выборку из массива, кот представляет собой список отелей по номеру страницы, который мы передали
// 5. выборку делаем с помощью переменных from и to. т.е. считаем с какого элемента нужно вырезать и по какой
// a - from: pageNumber * PAGE_SIZE - умножаем номер страницы на размер страницы: если 1 - возмется 9й элем, если 2 - возмется 18й элем и т.д. 
// b - to: from + PAGE_SIZE 
// 6. вырезаем из массива согласно переменным from, to и записываем результат в отдельную переменную pageHotels
// 7. далее эту переменную pageHotels подставляем в цикл forEach по этой переменной, по тому массиву, который в ней и производится отрисовка
// 8. далее работа с вызовом ф. внутри которой делали эти манипуляции - renderHotels, в вызов нужно передать второй параметр, который обозначает номер страницы

// АЛГОРИТМ показа следующих элементов/страниц по скроллу
// 1. для того, чтобы нам отслеживать скролл нужно нужно использовать обработчик события скролл
// событие навешивается на объект window так как именно он скроллится: window.addEventListener('scroll', function (evt){...}
// 2. "отмерять" скролл будем с помощью футера. т.е., когда будет видна верхняя часть футера - это будет значит, что нужно подгружать следующие элементы
// 2.1. как проверить виден ли футер страницы?
// a - определить положение футера относительно экрана (вьюпорта)
// b - определить высоту экрана
// c - если смещение футера минус высота экрана меньше высоты футера, футер виден хотя бы частично 

// отрисовка списка отелей
// добавляем replace 3м параметром - булевое значение, которое говорит: заменять список отелей или не заменять?
// т.е. если мы будем отрисовывать след страницу. то мы будем передавать сюда false, чтобы у нас список отелей добавлялся в конец контейнера
// а если отфильтровали и начинаем показывать сначала, то будем передавать true и контейнер будет чиститься
// очистку контейнера ставим во внутрь условия replace
function renderHotels(hotels, pageNumber, replace) {
    if (replace) {
        container.innerHTML = '';
    }
    var fragment = document.createDocumentFragment();
    var from = pageNumber * PAGE_SIZE; // умножаем номер страницы на размер страницы. т.е. если нулевая страница, то возмется нулевой эл, если первая, то 9-й, если вторая то 18-й и т.д.
    var to = from + PAGE_SIZE; // 
    var pageHotels = hotels.slice(from, to);

    pageHotels.forEach(function (hotel) {
        var element = getElementFromTemplate(hotel);
        fragment.appendChild(element);
    });
    container.appendChild(fragment);
}

// СОБЫТИЯ
// Фазы событий
// всплытие - захват (true)

// ДЕЛЕГИРОВАНИЕ - прием основанный на всплытии событий
// делегирование - заключается в том, что мы начинаем слушать события интересующих нас элементов выше по DOM-дереву
// там, где все эти элементы лежа
var filters = document.querySelectorAll('.hotel-filter');
for (var i = 0; i < filters.length; i++) {
    filters[i].onclick = function (evt) {
        var clickedElementID = evt.target.id; // получаем id элемента по которому кликнули
        setActiveFilter(clickedElementID); // и после этого запускаем ф. setActiveFilter() которая и будет заниматься установлением нужных фильтров. объявление этой ф. ниже
    };
}

// недостаток 